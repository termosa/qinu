{"version":3,"file":"qinu.min.js","sources":["qinu.js"],"sourcesContent":["const defaults = {\n  length: 32,\n  template: '%qinu%',\n  dict: '1234567890abcdefghijklmnopqrstuvwxyz',\n  random: false\n}\n\nconst next = (key, dict) => {\n  if (!key.length) return ''\n  const i = dict.indexOf(key.slice(-1))\n  if (i + 1 < dict.length) return key.slice(0, -1) + dict[i + 1]\n  return next(key.slice(0, -1), dict) + dict[0]\n}\n\nconst generateKey = (dict, length, key = '') => {\n  if (key.length >= length) return key\n  const randomIndex = Math.floor(Math.random() * dict.length)\n  const newChar = dict[randomIndex]\n  return generateKey(dict, length, key + newChar)\n}\n\nconst applyTemplate = (template, key, args) => {\n  return args.reduce(\n    (str, arg, i) => str.replace(new RegExp(`%arg\\\\[${i}\\\\]%`, 'g'), arg),\n    template.replace(/%qinu%/g, key)\n  )\n}\n\nconst prepareDict = (dict) =>\n  dict.split('').sort().filter((c, i, l) => l[i - 1] !== c).join('')\n\nconst normalizeOptions = (options) => {\n  if (!options && options !== 0) {\n    options = {}\n  } else if (typeof options !== 'object') {\n    options = { length: +options }\n  }\n  options = { ...defaults, ...options }\n  if (options.dict) options.dict = prepareDict(options.dict)\n  return options\n}\n\nclass Qinu {\n  next (dict, length) {\n    const key = this.key || generateKey(dict, length)\n    this.key = next(key, dict)\n    return this.key\n  }\n}\n\n// Not an arrow function, cause it requires context\nfunction qinu (options, args) {\n  const { dict, length, template, args: optArgs, random } =\n    this instanceof Qinu ? options : normalizeOptions(options)\n  if (!(args instanceof Array)) {\n    args = Array.prototype.slice.call(arguments, 1)\n  }\n  if (optArgs instanceof Array) {\n    args = optArgs.concat(args)\n  }\n\n  const key = !random && this instanceof Qinu\n    ? this.next(dict, length) : generateKey(dict, length)\n  return applyTemplate(template, key, args)\n}\n\nqinu.create = options => qinu.bind(new Qinu(), normalizeOptions(options))\n\nexport default qinu\n"],"names":["const","defaults","length","template","dict","random","next","key","i","indexOf","slice","generateKey","newChar","Math","floor","applyTemplate","args","reduce","str","arg","replace","RegExp","normalizeOptions","options","Object","split","sort","filter","c","l","join","Qinu","qinu","this","optArgs","Array","prototype","call","arguments","concat","create","bind"],"mappings":"gLAAAA,IAAMC,GACJC,OAAQ,GACRC,SAAU,SACVC,KAAM,uCACNC,QAAQ,GAGJC,WAAQC,EAAKH,GACjB,IAAKG,EAAIL,OAAQ,MAAO,GACxBF,IAAMQ,EAAIJ,EAAKK,QAAQF,EAAIG,OAAO,IAClC,OAAIF,EAAI,EAAIJ,EAAKF,OAAeK,EAAIG,MAAM,GAAI,GAAKN,EAAKI,EAAI,GACrDF,EAAKC,EAAIG,MAAM,GAAI,GAAIN,GAAQA,EAAK,IAGvCO,WAAeP,EAAMF,EAAQK,GACjC,kBADuC,IACnCA,EAAIL,QAAUA,EAAQ,OAAOK,EACjCP,IACMY,EAAUR,EADIS,KAAKC,MAAMD,KAAKR,SAAWD,EAAKF,SAEpD,OAAOS,EAAYP,EAAMF,EAAQK,EAAMK,IAGnCG,WAAiBZ,EAAUI,EAAKS,GACpC,OAAOA,EAAKC,gBACTC,EAAKC,EAAKX,UAAMU,EAAIE,QAAQ,IAAIC,iBAAiBb,SAAS,KAAMW,IACjEhB,EAASiB,QAAQ,UAAWb,KAO1Be,WAAoBC,GAQxB,OAPKA,GAAuB,IAAZA,EAEc,iBAAZA,IAChBA,GAAYrB,QAASqB,IAFrBA,MAIFA,EAAUC,iBAAKvB,EAAUsB,IACbnB,OAAMmB,EAAQnB,KAAmBmB,EAAQnB,KAThDqB,MAAM,IAAIC,OAAOC,gBAAQC,EAAGpB,EAAGqB,UAAMA,EAAErB,EAAI,KAAOoB,IAAGE,KAAK,KAUxDP,GAGHQ,eASN,SAASC,EAAMT,EAASP,GACtB,MACEiB,gBAAgBF,EAAOR,EAAUD,EAAiBC,GAD5CnB,SAAMF,WAAQC,aAAgB+B,SAAS7B,WAEzCW,aAAgBmB,QACpBnB,EAAOmB,MAAMC,UAAU1B,MAAM2B,KAAKC,UAAW,IAE3CJ,aAAmBC,QACrBnB,EAAOkB,EAAQK,OAAOvB,IAGxBhB,IAAMO,GAAOF,GAAU4B,gBAAgBF,EACnCE,KAAK3B,KAAKF,EAAMF,GAAUS,EAAYP,EAAMF,GAChD,OAAOa,EAAcZ,EAAUI,EAAKS,sBApBpCV,cAAMF,EAAMF,GACZ,IAAQK,EAAM0B,KAAK1B,KAAOI,EAAYP,EAAMF,GAE5C,OADA+B,KAAO1B,IAAMD,EAAKC,EAAKH,GACd6B,KAAK1B,KAoBhByB,EAAKQ,gBAASjB,UAAWS,EAAKS,KAAK,IAAIV,EAAQT,EAAiBC"}